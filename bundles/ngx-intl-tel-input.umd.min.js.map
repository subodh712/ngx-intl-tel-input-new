{"version":3,"sources":["ng://ngx-intl-tel-input/lib/ngx-intl-tel-input.service.ts","ng://ngx-intl-tel-input/lib/data/country-code.ts","ng://ngx-intl-tel-input/lib/ngx-intl-tel-input.validator.ts","ng://ngx-intl-tel-input/lib/ngx-intl-tel-input.component.ts","ng://ngx-intl-tel-input/lib/ngx-intl-tel-input.module.ts"],"names":["NgxIntlTelInputService","Injectable","args","providedIn","CountryCode","this","allCountries","phoneNumberValidator","control","number","isRequired","errors","required","error","validatePhoneNumber","valid","lpn.PhoneNumberUtil","getInstance","parse","value","countryCode","e","isValidNumberForRegion","Éµ0","NgxIntlTelInputComponent","countryCodeData","preferredCountries","enablePlaceholder","cssClass","onlyCountries","enableAutoCountrySelect","phoneNumber","preferredCountriesInDropDown","phoneUtil","disabled","onTouched","propagateChange","_","prototype","ngOnInit","_this","fetchCountryData","length","forEach","iso2","preferredCountry","filter","c","push","includes","selectedCountry","onPhoneNumberChange","toUpperCase","getCountryCode","getCountryIsoCode","newCountry","find","internationalNumber","format","lpn.PhoneNumberFormat","INTERNATIONAL","nationalNumber","NATIONAL","onCountrySelect","country","el","focus","onInputKeyPress","event","inputChar","String","fromCharCode","charCode","test","preventDefault","name","toString","dialCode","priority","areaCodes","undefined","flagClass","toLocaleLowerCase","placeHolder","getPhoneNumberPlaceHolder","getExampleNumber","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","obj","setTimeout","rawNumber","values_","countries","mainCountry","secondaryCountries","matchedCountry","areaCode","startsWith","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","useValue","Input","NgxIntlTelInputModule","forRoot","ngModule","NgModule","declarations","imports","CommonModule","FormsModule","ReactiveFormsModule","BsDropdownModule","exports"],"mappings":"ugBAAA,IAAAA,EAAA,WAOC,SAAAA,gCALAC,EAAAA,WAAUC,KAAA,CAAC,CACXC,WAAY,sJAHb,GCAAC,EAAA,SAAAA,IACQC,KAAAC,aAAe,CACrB,CACC,6BACA,KACA,MAED,CACC,qBACA,KACA,OAED,CACC,uBACA,KACA,OAED,CACC,iBACA,KACA,QAED,CACC,UACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,WACA,KACA,QAED,CACC,sBACA,KACA,QAED,CACC,YACA,KACA,MAED,CACC,qBACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,YACA,KACA,KACA,GAED,CACC,uBACA,KACA,MAED,CACC,0BACA,KACA,OAED,CACC,UACA,KACA,QAED,CACC,uBACA,KACA,OAED,CACC,wBACA,KACA,OAED,CACC,WACA,KACA,QAED,CACC,qBACA,KACA,OAED,CACC,mBACA,KACA,MAED,CACC,SACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,UACA,KACA,QAED,CACC,iBACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,+CACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,kBACA,KACA,MAED,CACC,iCACA,KACA,OAED,CACC,yBACA,KACA,QAED,CACC,SACA,KACA,OAED,CACC,sBACA,KACA,OAED,CACC,eACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,sBACA,KACA,OAED,CACC,SACA,KACA,IACA,EACA,CACC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAC7E,MAAO,MAAO,MAAO,MAAO,MAAO,QAGrC,CACC,0BACA,KACA,OAED,CACC,wBACA,KACA,MACA,GAED,CACC,iBACA,KACA,QAED,CACC,uDACA,KACA,OAED,CACC,eACA,KACA,OAED,CACC,QACA,KACA,MAED,CACC,aACA,KACA,MAED,CACC,mBACA,KACA,KACA,GAED,CACC,0BACA,KACA,KACA,GAED,CACC,WACA,KACA,MAED,CACC,yBACA,KACA,OAED,CACC,iDACA,KACA,OAED,CACC,uCACA,KACA,OAED,CACC,eACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,OACA,KACA,MAED,CACC,UACA,KACA,MACA,GAED,CACC,kBACA,KACA,OAED,CACC,mCACA,KACA,OAED,CACC,oBACA,KACA,MAED,CACC,WACA,KACA,OAED,CACC,WACA,KACA,QAED,CACC,4CACA,KACA,IACA,EACA,CAAC,MAAO,MAAO,QAEhB,CACC,UACA,KACA,OAED,CACC,iBACA,KACA,MAED,CACC,cACA,KACA,OAED,CACC,wCACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,kBACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,oCACA,KACA,OAED,CACC,0BACA,KACA,OAED,CACC,OACA,KACA,OAED,CACC,kBACA,KACA,MACA,GAED,CACC,SACA,KACA,MAED,CACC,mCACA,KACA,OAED,CACC,yCACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,uBACA,KACA,OAED,CACC,wBACA,KACA,MAED,CACC,gBACA,KACA,OAED,CACC,YACA,KACA,OAED,CACC,kBACA,KACA,MAED,CACC,+BACA,KACA,OAED,CACC,UACA,KACA,QAED,CACC,aACA,KACA,MACA,GAED,CACC,OACA,KACA,QAED,CACC,YACA,KACA,OAED,CACC,WACA,KACA,KACA,EACA,CAAC,OAEF,CACC,kBACA,KACA,OAED,CACC,+BACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,iBACA,KACA,OAED,CACC,yBACA,KACA,MAED,CACC,mBACA,KACA,OAED,CACC,eACA,KACA,MAED,CACC,YACA,KACA,MAED,CACC,kBACA,KACA,MAED,CACC,mBACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,cACA,KACA,KACA,EACA,CAAC,OAEF,CACC,oBACA,KACA,OAED,CACC,iBACA,KACA,KACA,GAED,CACC,UACA,KACA,QAED,CACC,aACA,KACA,MAED,CACC,SACA,KACA,KACA,EACA,CAAC,OAEF,CACC,qBACA,KACA,OAED,CACC,yBACA,KACA,IACA,GAED,CACC,QACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,0BACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,mBACA,KACA,OAED,CACC,qBACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,mBACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,sBACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,iCACA,KACA,OAED,CACC,4BACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,WACA,KACA,MAED,CACC,WACA,KACA,OAED,CACC,OACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,mBACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,4BACA,KACA,OAED,CACC,oBACA,KACA,OAED,CACC,UACA,KACA,MACA,GAED,CACC,kBACA,KACA,MAED,CACC,aACA,KACA,OAED,CACC,8BACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,oBACA,KACA,OAED,CACC,yBACA,KACA,OAED,CACC,aACA,KACA,QAED,CACC,sBACA,KACA,MACA,GAED,CACC,0BACA,KACA,OAED,CACC,2BACA,KACA,MAED,CACC,oBACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,0BACA,KACA,MAED,CACC,qCACA,KACA,OAED,CACC,cACA,KACA,MAED,CACC,YACA,KACA,OAED,CACC,gBACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,OACA,KACA,OAED,CACC,iBACA,KACA,OAED,CACC,+BACA,KACA,OAED,CACC,2BACA,KACA,QAED,CACC,iBACA,KACA,KACA,GAED,CACC,kBACA,KACA,OAED,CACC,wBACA,KACA,MAED,CACC,QACA,KACA,OAED,CACC,wBACA,KACA,OAED,CACC,kBACA,KACA,OAED,CACC,mBACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,cACA,KACA,MAED,CACC,cACA,KACA,MAED,CACC,kBACA,KACA,MAED,CACC,WACA,KACA,OAED,CACC,cACA,KACA,IACA,EACA,CAAC,MAAO,QAET,CACC,iBACA,KACA,OAED,CACC,uBACA,KACA,MACA,GAED,CACC,oBACA,KACA,MAED,CACC,kBACA,KACA,IACA,GAED,CACC,SACA,KACA,OAED,CACC,sCACA,KACA,MACA,GAED,CACC,eACA,KACA,OAED,CACC,wBACA,KACA,QAED,CACC,cACA,KACA,QAED,CACC,iDACA,KACA,MACA,GAED,CACC,uDACA,KACA,OAED,CACC,mCACA,KACA,QAED,CACC,QACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,8CACA,KACA,OAED,CACC,6CACA,KACA,OAED,CACC,oBACA,KACA,OAED,CACC,kBACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,eACA,KACA,OAED,CACC,YACA,KACA,MAED,CACC,eACA,KACA,QAED,CACC,uBACA,KACA,OAED,CACC,uBACA,KACA,OAED,CACC,kBACA,KACA,OAED,CACC,uBACA,KACA,OAED,CACC,eACA,KACA,MAED,CACC,qBACA,KACA,MAED,CACC,gCACA,KACA,OAED,CACC,iBACA,KACA,MAED,CACC,0BACA,KACA,MAED,CACC,qBACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,yBACA,KACA,KACA,GAED,CACC,YACA,KACA,OAED,CACC,mBACA,KACA,MAED,CACC,wBACA,KACA,MAED,CACC,mBACA,KACA,OAED,CACC,cACA,KACA,OAED,CACC,aACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,iBACA,KACA,MAED,CACC,cACA,KACA,OAED,CACC,OACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,QACA,KACA,OAED,CACC,sBACA,KACA,QAED,CACC,oBACA,KACA,OAED,CACC,mBACA,KACA,MAED,CACC,eACA,KACA,OAED,CACC,2BACA,KACA,QAED,CACC,SACA,KACA,OAED,CACC,sBACA,KACA,QAED,CACC,SACA,KACA,OAED,CACC,oBACA,KACA,OAED,CACC,qDACA,KACA,OAED,CACC,iBACA,KACA,KACA,GAED,CACC,gBACA,KACA,IACA,GAED,CACC,UACA,KACA,OAED,CACC,2BACA,KACA,OAED,CACC,UACA,KACA,OAED,CACC,oCACA,KACA,KACA,GAED,CACC,YACA,KACA,MAED,CACC,qBACA,KACA,MAED,CACC,oBACA,KACA,OAED,CACC,sCACA,KACA,MACA,GAED,CACC,mBACA,KACA,OAED,CACC,SACA,KACA,OAED,CACC,WACA,KACA,OAED,CACC,gBACA,KACA,MACA,KCnuCUC,EAAuB,SAACC,OAGhCC,EAFEC,EAAaF,EAAQG,SAAsC,IAA5BH,EAAQG,OAAOC,SAC9CC,EAAQ,CAAEC,oBAAqB,CAAEC,OAAO,IAG9C,IACCN,EAASO,EAAAA,gBAAoBC,cAAcC,MAAMV,EAAQW,MAAMV,OAAQD,EAAQW,MAAMC,aACpF,MAAOC,GACR,IAAmB,IAAfX,EAAuB,OAAOG,EAGnC,GAAIL,EAAQW,MAAO,CAClB,IAAKV,EACJ,OAAOI,EAEP,IAAKG,EAAAA,gBAAoBC,cAAcK,uBAAuBb,EAAQD,EAAQW,MAAMC,aACnF,OAAOP,ICnBXU,EAqBahB,EAdbiB,EAAA,WAwCC,SAAAA,EACSC,GAAApB,KAAAoB,gBAAAA,EApBApB,KAAAc,MAAQ,GACRd,KAAAqB,mBAAoC,GACpCrB,KAAAsB,mBAAoB,EACp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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class NgxIntlTelInputService {\r\n\r\n\tconstructor() { }\r\n}\r\n","export class CountryCode {\r\n\tpublic allCountries = [\r\n\t\t[\r\n\t\t\t'Afghanistan (Ã¢ÂÂ«ÃÂ§ÃÂÃÂºÃÂ§ÃÂÃÂ³ÃÂªÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'af',\r\n\t\t\t'93'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Albania (ShqipÃÂ«ri)',\r\n\t\t\t'al',\r\n\t\t\t'355'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Algeria (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ¬ÃÂ²ÃÂ§ÃÂ¦ÃÂ±Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'dz',\r\n\t\t\t'213'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'American Samoa',\r\n\t\t\t'as',\r\n\t\t\t'1684'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Andorra',\r\n\t\t\t'ad',\r\n\t\t\t'376'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Angola',\r\n\t\t\t'ao',\r\n\t\t\t'244'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Anguilla',\r\n\t\t\t'ai',\r\n\t\t\t'1264'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Antigua and Barbuda',\r\n\t\t\t'ag',\r\n\t\t\t'1268'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Argentina',\r\n\t\t\t'ar',\r\n\t\t\t'54'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Armenia (ÃÂÃÂ¡ÃÂµÃÂ¡ÃÂ½ÃÂ¿ÃÂ¡ÃÂ¶)',\r\n\t\t\t'am',\r\n\t\t\t'374'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Aruba',\r\n\t\t\t'aw',\r\n\t\t\t'297'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Australia',\r\n\t\t\t'au',\r\n\t\t\t'61',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Austria (ÃÂsterreich)',\r\n\t\t\t'at',\r\n\t\t\t'43'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Azerbaijan (AzÃÂrbaycan)',\r\n\t\t\t'az',\r\n\t\t\t'994'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Bahamas',\r\n\t\t\t'bs',\r\n\t\t\t'1242'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Bahrain (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ¨ÃÂ­ÃÂ±ÃÂÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'bh',\r\n\t\t\t'973'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Bangladesh (Ã Â¦Â¬Ã Â¦Â¾Ã Â¦ÂÃ Â¦Â²Ã Â¦Â¾Ã Â¦Â¦Ã Â§ÂÃ Â¦Â¶)',\r\n\t\t\t'bd',\r\n\t\t\t'880'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Barbados',\r\n\t\t\t'bb',\r\n\t\t\t'1246'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Belarus (ÃÂÃÂµÃÂ»ÃÂ°ÃÂÃÂÃÂÃÂ)',\r\n\t\t\t'by',\r\n\t\t\t'375'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Belgium (BelgiÃÂ«)',\r\n\t\t\t'be',\r\n\t\t\t'32'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Belize',\r\n\t\t\t'bz',\r\n\t\t\t'501'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Benin (BÃÂ©nin)',\r\n\t\t\t'bj',\r\n\t\t\t'229'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Bermuda',\r\n\t\t\t'bm',\r\n\t\t\t'1441'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Bhutan (Ã Â½Â Ã Â½ÂÃ Â¾Â²Ã Â½Â´Ã Â½Â)',\r\n\t\t\t'bt',\r\n\t\t\t'975'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Bolivia',\r\n\t\t\t'bo',\r\n\t\t\t'591'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Bosnia and Herzegovina (ÃÂÃÂ¾ÃÂÃÂ½ÃÂ° ÃÂ¸ ÃÂ¥ÃÂµÃÂÃÂÃÂµÃÂ³ÃÂ¾ÃÂ²ÃÂ¸ÃÂ½ÃÂ°)',\r\n\t\t\t'ba',\r\n\t\t\t'387'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Botswana',\r\n\t\t\t'bw',\r\n\t\t\t'267'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Brazil (Brasil)',\r\n\t\t\t'br',\r\n\t\t\t'55'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'British Indian Ocean Territory',\r\n\t\t\t'io',\r\n\t\t\t'246'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'British Virgin Islands',\r\n\t\t\t'vg',\r\n\t\t\t'1284'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Brunei',\r\n\t\t\t'bn',\r\n\t\t\t'673'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Bulgaria (ÃÂÃÂÃÂ»ÃÂ³ÃÂ°ÃÂÃÂ¸ÃÂ)',\r\n\t\t\t'bg',\r\n\t\t\t'359'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Burkina Faso',\r\n\t\t\t'bf',\r\n\t\t\t'226'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Burundi (Uburundi)',\r\n\t\t\t'bi',\r\n\t\t\t'257'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Cambodia (Ã¡ÂÂÃ¡ÂÂÃ¡ÂÂÃ¡ÂÂÃ¡ÂÂ»Ã¡ÂÂÃ¡ÂÂ¶)',\r\n\t\t\t'kh',\r\n\t\t\t'855'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Cameroon (Cameroun)',\r\n\t\t\t'cm',\r\n\t\t\t'237'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Canada',\r\n\t\t\t'ca',\r\n\t\t\t'1',\r\n\t\t\t1,\r\n\t\t\t[\r\n\t\t\t\t'204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416',\r\n\t\t\t\t'418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587',\r\n\t\t\t\t'604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807',\r\n\t\t\t\t'819', '825', '867', '873', '902', '905'\r\n\t\t\t]\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Cape Verde (Kabu Verdi)',\r\n\t\t\t'cv',\r\n\t\t\t'238'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Caribbean Netherlands',\r\n\t\t\t'bq',\r\n\t\t\t'599',\r\n\t\t\t1\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Cayman Islands',\r\n\t\t\t'ky',\r\n\t\t\t'1345'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Central African Republic (RÃÂ©publique centrafricaine)',\r\n\t\t\t'cf',\r\n\t\t\t'236'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Chad (Tchad)',\r\n\t\t\t'td',\r\n\t\t\t'235'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Chile',\r\n\t\t\t'cl',\r\n\t\t\t'56'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'China (Ã¤Â¸Â­Ã¥ÂÂ½)',\r\n\t\t\t'cn',\r\n\t\t\t'86'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Christmas Island',\r\n\t\t\t'cx',\r\n\t\t\t'61',\r\n\t\t\t2\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Cocos (Keeling) Islands',\r\n\t\t\t'cc',\r\n\t\t\t'61',\r\n\t\t\t1\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Colombia',\r\n\t\t\t'co',\r\n\t\t\t'57'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Comoros (Ã¢ÂÂ«ÃÂ¬ÃÂ²ÃÂ± ÃÂ§ÃÂÃÂÃÂÃÂ±Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'km',\r\n\t\t\t'269'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)',\r\n\t\t\t'cd',\r\n\t\t\t'243'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Congo (Republic) (Congo-Brazzaville)',\r\n\t\t\t'cg',\r\n\t\t\t'242'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Cook Islands',\r\n\t\t\t'ck',\r\n\t\t\t'682'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Costa Rica',\r\n\t\t\t'cr',\r\n\t\t\t'506'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'CÃÂ´te dÃ¢ÂÂIvoire',\r\n\t\t\t'ci',\r\n\t\t\t'225'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Croatia (Hrvatska)',\r\n\t\t\t'hr',\r\n\t\t\t'385'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Cuba',\r\n\t\t\t'cu',\r\n\t\t\t'53'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'CuraÃÂ§ao',\r\n\t\t\t'cw',\r\n\t\t\t'599',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Cyprus (ÃÂÃÂÃÂÃÂÃÂ¿ÃÂ)',\r\n\t\t\t'cy',\r\n\t\t\t'357'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Czech Republic (ÃÂeskÃÂ¡ republika)',\r\n\t\t\t'cz',\r\n\t\t\t'420'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Denmark (Danmark)',\r\n\t\t\t'dk',\r\n\t\t\t'45'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Djibouti',\r\n\t\t\t'dj',\r\n\t\t\t'253'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Dominica',\r\n\t\t\t'dm',\r\n\t\t\t'1767'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Dominican Republic (RepÃÂºblica Dominicana)',\r\n\t\t\t'do',\r\n\t\t\t'1',\r\n\t\t\t2,\r\n\t\t\t['809', '829', '849']\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Ecuador',\r\n\t\t\t'ec',\r\n\t\t\t'593'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Egypt (Ã¢ÂÂ«ÃÂÃÂµÃÂ±Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'eg',\r\n\t\t\t'20'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'El Salvador',\r\n\t\t\t'sv',\r\n\t\t\t'503'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Equatorial Guinea (Guinea Ecuatorial)',\r\n\t\t\t'gq',\r\n\t\t\t'240'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Eritrea',\r\n\t\t\t'er',\r\n\t\t\t'291'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Estonia (Eesti)',\r\n\t\t\t'ee',\r\n\t\t\t'372'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Ethiopia',\r\n\t\t\t'et',\r\n\t\t\t'251'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Falkland Islands (Islas Malvinas)',\r\n\t\t\t'fk',\r\n\t\t\t'500'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Faroe Islands (FÃÂ¸royar)',\r\n\t\t\t'fo',\r\n\t\t\t'298'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Fiji',\r\n\t\t\t'fj',\r\n\t\t\t'679'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Finland (Suomi)',\r\n\t\t\t'fi',\r\n\t\t\t'358',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'France',\r\n\t\t\t'fr',\r\n\t\t\t'33'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'French Guiana (Guyane franÃÂ§aise)',\r\n\t\t\t'gf',\r\n\t\t\t'594'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'French Polynesia (PolynÃÂ©sie franÃÂ§aise)',\r\n\t\t\t'pf',\r\n\t\t\t'689'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Gabon',\r\n\t\t\t'ga',\r\n\t\t\t'241'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Gambia',\r\n\t\t\t'gm',\r\n\t\t\t'220'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Georgia (Ã¡ÂÂ¡Ã¡ÂÂÃ¡ÂÂ¥Ã¡ÂÂÃ¡ÂÂ Ã¡ÂÂÃ¡ÂÂÃ¡ÂÂÃ¡ÂÂÃ¡ÂÂ)',\r\n\t\t\t'ge',\r\n\t\t\t'995'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Germany (Deutschland)',\r\n\t\t\t'de',\r\n\t\t\t'49'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Ghana (Gaana)',\r\n\t\t\t'gh',\r\n\t\t\t'233'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Gibraltar',\r\n\t\t\t'gi',\r\n\t\t\t'350'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Greece (ÃÂÃÂ»ÃÂ»ÃÂ¬ÃÂ´ÃÂ±)',\r\n\t\t\t'gr',\r\n\t\t\t'30'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Greenland (Kalaallit Nunaat)',\r\n\t\t\t'gl',\r\n\t\t\t'299'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Grenada',\r\n\t\t\t'gd',\r\n\t\t\t'1473'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Guadeloupe',\r\n\t\t\t'gp',\r\n\t\t\t'590',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Guam',\r\n\t\t\t'gu',\r\n\t\t\t'1671'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Guatemala',\r\n\t\t\t'gt',\r\n\t\t\t'502'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Guernsey',\r\n\t\t\t'gg',\r\n\t\t\t'44',\r\n\t\t\t1,\r\n\t\t\t[1481]\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Guinea (GuinÃÂ©e)',\r\n\t\t\t'gn',\r\n\t\t\t'224'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Guinea-Bissau (GuinÃÂ© Bissau)',\r\n\t\t\t'gw',\r\n\t\t\t'245'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Guyana',\r\n\t\t\t'gy',\r\n\t\t\t'592'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Haiti',\r\n\t\t\t'ht',\r\n\t\t\t'509'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Honduras',\r\n\t\t\t'hn',\r\n\t\t\t'504'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Hong Kong (Ã©Â¦ÂÃ¦Â¸Â¯)',\r\n\t\t\t'hk',\r\n\t\t\t'852'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Hungary (MagyarorszÃÂ¡g)',\r\n\t\t\t'hu',\r\n\t\t\t'36'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Iceland (ÃÂsland)',\r\n\t\t\t'is',\r\n\t\t\t'354'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'India (Ã Â¤Â­Ã Â¤Â¾Ã Â¤Â°Ã Â¤Â¤)',\r\n\t\t\t'in',\r\n\t\t\t'91'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Indonesia',\r\n\t\t\t'id',\r\n\t\t\t'62'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Iran (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ±ÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'ir',\r\n\t\t\t'98'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Iraq (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ¹ÃÂ±ÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'iq',\r\n\t\t\t'964'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Ireland',\r\n\t\t\t'ie',\r\n\t\t\t'353'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Isle of Man',\r\n\t\t\t'im',\r\n\t\t\t'44',\r\n\t\t\t2,\r\n\t\t\t[1624]\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Israel (Ã¢ÂÂ«ÃÂÃÂ©ÃÂ¨ÃÂÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'il',\r\n\t\t\t'972'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Italy (Italia)',\r\n\t\t\t'it',\r\n\t\t\t'39',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Jamaica',\r\n\t\t\t'jm',\r\n\t\t\t'1876'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Japan (Ã¦ÂÂ¥Ã¦ÂÂ¬)',\r\n\t\t\t'jp',\r\n\t\t\t'81'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Jersey',\r\n\t\t\t'je',\r\n\t\t\t'44',\r\n\t\t\t3,\r\n\t\t\t[1534]\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Jordan (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ£ÃÂ±ÃÂ¯ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'jo',\r\n\t\t\t'962'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Kazakhstan (ÃÂÃÂ°ÃÂ·ÃÂ°ÃÂÃÂÃÂÃÂ°ÃÂ½)',\r\n\t\t\t'kz',\r\n\t\t\t'7',\r\n\t\t\t1\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Kenya',\r\n\t\t\t'ke',\r\n\t\t\t'254'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Kiribati',\r\n\t\t\t'ki',\r\n\t\t\t'686'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Kosovo',\r\n\t\t\t'xk',\r\n\t\t\t'383'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Kuwait (Ã¢ÂÂ«ÃÂ§ÃÂÃÂÃÂÃÂÃÂªÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'kw',\r\n\t\t\t'965'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Kyrgyzstan (ÃÂÃÂÃÂÃÂ³ÃÂÃÂ·ÃÂÃÂÃÂ°ÃÂ½)',\r\n\t\t\t'kg',\r\n\t\t\t'996'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Laos (Ã ÂºÂ¥Ã ÂºÂ²Ã ÂºÂ§)',\r\n\t\t\t'la',\r\n\t\t\t'856'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Latvia (Latvija)',\r\n\t\t\t'lv',\r\n\t\t\t'371'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Lebanon (Ã¢ÂÂ«ÃÂÃÂ¨ÃÂÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'lb',\r\n\t\t\t'961'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Lesotho',\r\n\t\t\t'ls',\r\n\t\t\t'266'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Liberia',\r\n\t\t\t'lr',\r\n\t\t\t'231'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Libya (Ã¢ÂÂ«ÃÂÃÂÃÂ¨ÃÂÃÂ§Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'ly',\r\n\t\t\t'218'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Liechtenstein',\r\n\t\t\t'li',\r\n\t\t\t'423'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Lithuania (Lietuva)',\r\n\t\t\t'lt',\r\n\t\t\t'370'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Luxembourg',\r\n\t\t\t'lu',\r\n\t\t\t'352'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Macau (Ã¦Â¾Â³Ã©ÂÂ)',\r\n\t\t\t'mo',\r\n\t\t\t'853'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Macedonia (FYROM) (ÃÂÃÂ°ÃÂºÃÂµÃÂ´ÃÂ¾ÃÂ½ÃÂ¸ÃÂÃÂ°)',\r\n\t\t\t'mk',\r\n\t\t\t'389'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Madagascar (Madagasikara)',\r\n\t\t\t'mg',\r\n\t\t\t'261'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Malawi',\r\n\t\t\t'mw',\r\n\t\t\t'265'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Malaysia',\r\n\t\t\t'my',\r\n\t\t\t'60'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Maldives',\r\n\t\t\t'mv',\r\n\t\t\t'960'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Mali',\r\n\t\t\t'ml',\r\n\t\t\t'223'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Malta',\r\n\t\t\t'mt',\r\n\t\t\t'356'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Marshall Islands',\r\n\t\t\t'mh',\r\n\t\t\t'692'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Martinique',\r\n\t\t\t'mq',\r\n\t\t\t'596'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Mauritania (Ã¢ÂÂ«ÃÂÃÂÃÂ±ÃÂÃÂªÃÂ§ÃÂÃÂÃÂ§Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'mr',\r\n\t\t\t'222'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Mauritius (Moris)',\r\n\t\t\t'mu',\r\n\t\t\t'230'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Mayotte',\r\n\t\t\t'yt',\r\n\t\t\t'262',\r\n\t\t\t1\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Mexico (MÃÂ©xico)',\r\n\t\t\t'mx',\r\n\t\t\t'52'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Micronesia',\r\n\t\t\t'fm',\r\n\t\t\t'691'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Moldova (Republica Moldova)',\r\n\t\t\t'md',\r\n\t\t\t'373'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Monaco',\r\n\t\t\t'mc',\r\n\t\t\t'377'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Mongolia (ÃÂÃÂ¾ÃÂ½ÃÂ³ÃÂ¾ÃÂ»)',\r\n\t\t\t'mn',\r\n\t\t\t'976'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Montenegro (Crna Gora)',\r\n\t\t\t'me',\r\n\t\t\t'382'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Montserrat',\r\n\t\t\t'ms',\r\n\t\t\t'1664'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Morocco (Ã¢ÂÂ«ÃÂ§ÃÂÃÂÃÂºÃÂ±ÃÂ¨Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'ma',\r\n\t\t\t'212',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Mozambique (MoÃÂ§ambique)',\r\n\t\t\t'mz',\r\n\t\t\t'258'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Myanmar (Burma) (Ã¡ÂÂÃ¡ÂÂ¼Ã¡ÂÂÃ¡ÂÂºÃ¡ÂÂÃ¡ÂÂ¬)',\r\n\t\t\t'mm',\r\n\t\t\t'95'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Namibia (NamibiÃÂ«)',\r\n\t\t\t'na',\r\n\t\t\t'264'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Nauru',\r\n\t\t\t'nr',\r\n\t\t\t'674'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Nepal (Ã Â¤Â¨Ã Â¥ÂÃ Â¤ÂªÃ Â¤Â¾Ã Â¤Â²)',\r\n\t\t\t'np',\r\n\t\t\t'977'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Netherlands (Nederland)',\r\n\t\t\t'nl',\r\n\t\t\t'31'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'New Caledonia (Nouvelle-CalÃÂ©donie)',\r\n\t\t\t'nc',\r\n\t\t\t'687'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'New Zealand',\r\n\t\t\t'nz',\r\n\t\t\t'64'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Nicaragua',\r\n\t\t\t'ni',\r\n\t\t\t'505'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Niger (Nijar)',\r\n\t\t\t'ne',\r\n\t\t\t'227'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Nigeria',\r\n\t\t\t'ng',\r\n\t\t\t'234'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Niue',\r\n\t\t\t'nu',\r\n\t\t\t'683'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Norfolk Island',\r\n\t\t\t'nf',\r\n\t\t\t'672'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'North Korea (Ã¬Â¡Â°Ã¬ÂÂ  Ã«Â¯Â¼Ã¬Â£Â¼Ã¬Â£Â¼Ã¬ÂÂ Ã¬ÂÂ¸Ã«Â¯Â¼ ÃªÂ³ÂµÃ­ÂÂÃªÂµÂ­)',\r\n\t\t\t'kp',\r\n\t\t\t'850'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Northern Mariana Islands',\r\n\t\t\t'mp',\r\n\t\t\t'1670'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Norway (Norge)',\r\n\t\t\t'no',\r\n\t\t\t'47',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Oman (Ã¢ÂÂ«ÃÂ¹ÃÂÃÂÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'om',\r\n\t\t\t'968'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Pakistan (Ã¢ÂÂ«ÃÂ¾ÃÂ§ÃÂ©ÃÂ³ÃÂªÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'pk',\r\n\t\t\t'92'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Palau',\r\n\t\t\t'pw',\r\n\t\t\t'680'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Palestine (Ã¢ÂÂ«ÃÂÃÂÃÂ³ÃÂ·ÃÂÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'ps',\r\n\t\t\t'970'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Panama (PanamÃÂ¡)',\r\n\t\t\t'pa',\r\n\t\t\t'507'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Papua New Guinea',\r\n\t\t\t'pg',\r\n\t\t\t'675'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Paraguay',\r\n\t\t\t'py',\r\n\t\t\t'595'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Peru (PerÃÂº)',\r\n\t\t\t'pe',\r\n\t\t\t'51'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Philippines',\r\n\t\t\t'ph',\r\n\t\t\t'63'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Poland (Polska)',\r\n\t\t\t'pl',\r\n\t\t\t'48'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Portugal',\r\n\t\t\t'pt',\r\n\t\t\t'351'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Puerto Rico',\r\n\t\t\t'pr',\r\n\t\t\t'1',\r\n\t\t\t3,\r\n\t\t\t['787', '939']\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Qatar (Ã¢ÂÂ«ÃÂÃÂ·ÃÂ±Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'qa',\r\n\t\t\t'974'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'RÃÂ©union (La RÃÂ©union)',\r\n\t\t\t're',\r\n\t\t\t'262',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Romania (RomÃÂ¢nia)',\r\n\t\t\t'ro',\r\n\t\t\t'40'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Russia (ÃÂ ÃÂ¾ÃÂÃÂÃÂ¸ÃÂ)',\r\n\t\t\t'ru',\r\n\t\t\t'7',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Rwanda',\r\n\t\t\t'rw',\r\n\t\t\t'250'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Saint BarthÃÂ©lemy (Saint-BarthÃÂ©lemy)',\r\n\t\t\t'bl',\r\n\t\t\t'590',\r\n\t\t\t1\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Saint Helena',\r\n\t\t\t'sh',\r\n\t\t\t'290'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Saint Kitts and Nevis',\r\n\t\t\t'kn',\r\n\t\t\t'1869'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Saint Lucia',\r\n\t\t\t'lc',\r\n\t\t\t'1758'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Saint Martin (Saint-Martin (partie franÃÂ§aise))',\r\n\t\t\t'mf',\r\n\t\t\t'590',\r\n\t\t\t2\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)',\r\n\t\t\t'pm',\r\n\t\t\t'508'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Saint Vincent and the Grenadines',\r\n\t\t\t'vc',\r\n\t\t\t'1784'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Samoa',\r\n\t\t\t'ws',\r\n\t\t\t'685'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'San Marino',\r\n\t\t\t'sm',\r\n\t\t\t'378'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'SÃÂ£o TomÃÂ© and PrÃÂ­ncipe (SÃÂ£o TomÃÂ© e PrÃÂ­ncipe)',\r\n\t\t\t'st',\r\n\t\t\t'239'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Saudi Arabia (Ã¢ÂÂ«ÃÂ§ÃÂÃÂÃÂÃÂÃÂÃÂ© ÃÂ§ÃÂÃÂ¹ÃÂ±ÃÂ¨ÃÂÃÂ© ÃÂ§ÃÂÃÂ³ÃÂ¹ÃÂÃÂ¯ÃÂÃÂ©Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'sa',\r\n\t\t\t'966'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Senegal (SÃÂ©nÃÂ©gal)',\r\n\t\t\t'sn',\r\n\t\t\t'221'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Serbia (ÃÂ¡ÃÂÃÂ±ÃÂ¸ÃÂÃÂ°)',\r\n\t\t\t'rs',\r\n\t\t\t'381'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Seychelles',\r\n\t\t\t'sc',\r\n\t\t\t'248'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Sierra Leone',\r\n\t\t\t'sl',\r\n\t\t\t'232'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Singapore',\r\n\t\t\t'sg',\r\n\t\t\t'65'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Sint Maarten',\r\n\t\t\t'sx',\r\n\t\t\t'1721'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Slovakia (Slovensko)',\r\n\t\t\t'sk',\r\n\t\t\t'421'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Slovenia (Slovenija)',\r\n\t\t\t'si',\r\n\t\t\t'386'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Solomon Islands',\r\n\t\t\t'sb',\r\n\t\t\t'677'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Somalia (Soomaaliya)',\r\n\t\t\t'so',\r\n\t\t\t'252'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'South Africa',\r\n\t\t\t'za',\r\n\t\t\t'27'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'South Korea (Ã«ÂÂÃ­ÂÂÃ«Â¯Â¼ÃªÂµÂ­)',\r\n\t\t\t'kr',\r\n\t\t\t'82'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'South Sudan (Ã¢ÂÂ«ÃÂ¬ÃÂÃÂÃÂ¨ ÃÂ§ÃÂÃÂ³ÃÂÃÂ¯ÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'ss',\r\n\t\t\t'211'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Spain (EspaÃÂ±a)',\r\n\t\t\t'es',\r\n\t\t\t'34'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Sri Lanka (Ã Â·ÂÃ Â·ÂÃ¢ÂÂÃ Â¶Â»Ã Â·Â Ã Â¶Â½Ã Â¶ÂÃ Â¶ÂÃ Â·ÂÃ Â·Â)',\r\n\t\t\t'lk',\r\n\t\t\t'94'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Sudan (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ³ÃÂÃÂ¯ÃÂ§ÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'sd',\r\n\t\t\t'249'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Suriname',\r\n\t\t\t'sr',\r\n\t\t\t'597'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Svalbard and Jan Mayen',\r\n\t\t\t'sj',\r\n\t\t\t'47',\r\n\t\t\t1\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Swaziland',\r\n\t\t\t'sz',\r\n\t\t\t'268'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Sweden (Sverige)',\r\n\t\t\t'se',\r\n\t\t\t'46'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Switzerland (Schweiz)',\r\n\t\t\t'ch',\r\n\t\t\t'41'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Syria (Ã¢ÂÂ«ÃÂ³ÃÂÃÂ±ÃÂÃÂ§Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'sy',\r\n\t\t\t'963'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Taiwan (Ã¥ÂÂ°Ã§ÂÂ£)',\r\n\t\t\t'tw',\r\n\t\t\t'886'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Tajikistan',\r\n\t\t\t'tj',\r\n\t\t\t'992'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Tanzania',\r\n\t\t\t'tz',\r\n\t\t\t'255'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Thailand (Ã Â¹ÂÃ Â¸ÂÃ Â¸Â¢)',\r\n\t\t\t'th',\r\n\t\t\t'66'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Timor-Leste',\r\n\t\t\t'tl',\r\n\t\t\t'670'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Togo',\r\n\t\t\t'tg',\r\n\t\t\t'228'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Tokelau',\r\n\t\t\t'tk',\r\n\t\t\t'690'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Tonga',\r\n\t\t\t'to',\r\n\t\t\t'676'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Trinidad and Tobago',\r\n\t\t\t'tt',\r\n\t\t\t'1868'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Tunisia (Ã¢ÂÂ«ÃÂªÃÂÃÂÃÂ³Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'tn',\r\n\t\t\t'216'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Turkey (TÃÂ¼rkiye)',\r\n\t\t\t'tr',\r\n\t\t\t'90'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Turkmenistan',\r\n\t\t\t'tm',\r\n\t\t\t'993'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Turks and Caicos Islands',\r\n\t\t\t'tc',\r\n\t\t\t'1649'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Tuvalu',\r\n\t\t\t'tv',\r\n\t\t\t'688'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'U.S. Virgin Islands',\r\n\t\t\t'vi',\r\n\t\t\t'1340'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Uganda',\r\n\t\t\t'ug',\r\n\t\t\t'256'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Ukraine (ÃÂ£ÃÂºÃÂÃÂ°ÃÂÃÂ½ÃÂ°)',\r\n\t\t\t'ua',\r\n\t\t\t'380'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'United Arab Emirates (Ã¢ÂÂ«ÃÂ§ÃÂÃÂ¥ÃÂÃÂ§ÃÂ±ÃÂ§ÃÂª ÃÂ§ÃÂÃÂ¹ÃÂ±ÃÂ¨ÃÂÃÂ© ÃÂ§ÃÂÃÂÃÂªÃÂ­ÃÂ¯ÃÂ©Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'ae',\r\n\t\t\t'971'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'United Kingdom',\r\n\t\t\t'gb',\r\n\t\t\t'44',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'United States',\r\n\t\t\t'us',\r\n\t\t\t'1',\r\n\t\t\t0\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Uruguay',\r\n\t\t\t'uy',\r\n\t\t\t'598'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Uzbekistan (OÃÂ»zbekiston)',\r\n\t\t\t'uz',\r\n\t\t\t'998'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Vanuatu',\r\n\t\t\t'vu',\r\n\t\t\t'678'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Vatican City (CittÃÂ  del Vaticano)',\r\n\t\t\t'va',\r\n\t\t\t'39',\r\n\t\t\t1\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Venezuela',\r\n\t\t\t've',\r\n\t\t\t'58'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Vietnam (ViÃ¡Â»Ât Nam)',\r\n\t\t\t'vn',\r\n\t\t\t'84'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Wallis and Futuna',\r\n\t\t\t'wf',\r\n\t\t\t'681'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Western Sahara (Ã¢ÂÂ«ÃÂ§ÃÂÃÂµÃÂ­ÃÂ±ÃÂ§ÃÂ¡ ÃÂ§ÃÂÃÂºÃÂ±ÃÂ¨ÃÂÃÂ©Ã¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'eh',\r\n\t\t\t'212',\r\n\t\t\t1\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Yemen (Ã¢ÂÂ«ÃÂ§ÃÂÃÂÃÂÃÂÃ¢ÂÂ¬Ã¢ÂÂ)',\r\n\t\t\t'ye',\r\n\t\t\t'967'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Zambia',\r\n\t\t\t'zm',\r\n\t\t\t'260'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'Zimbabwe',\r\n\t\t\t'zw',\r\n\t\t\t'263'\r\n\t\t],\r\n\t\t[\r\n\t\t\t'ÃÂland Islands',\r\n\t\t\t'ax',\r\n\t\t\t'358',\r\n\t\t\t1\r\n\t\t]\r\n\t];\r\n}\r\n","import { FormControl } from '@angular/forms';\r\nimport * as lpn from 'google-libphonenumber';\r\n\r\nexport const phoneNumberValidator = (control: FormControl) => {\r\n\tconst isRequired = control.errors && control.errors.required === true;\r\n\tconst error = { validatePhoneNumber: { valid: false } };\r\n\tlet number: lpn.PhoneNumber;\r\n\r\n\ttry {\r\n\t\tnumber = lpn.PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);\r\n\t} catch (e) {\r\n\t\tif (isRequired === true) { return error; }\r\n\t}\r\n\r\n\tif (control.value) {\r\n\t\tif (!number) {\r\n\t\t\treturn error;\r\n\t\t} else {\r\n\t\t\tif (!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {\r\n\t\t\t\treturn error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn;\r\n};\r\n","import { Component, OnInit, forwardRef, Input } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALIDATORS, NG_VALUE_ACCESSOR, FormControl } from '@angular/forms';\r\nimport { CountryCode } from './data/country-code';\r\nimport { phoneNumberValidator } from './ngx-intl-tel-input.validator';\r\nimport { Country } from './model/country.model';\r\nimport * as lpn from 'google-libphonenumber';\r\n\r\n@Component({\r\n\tselector: 'ngx-intl-tel-input',\r\n\ttemplateUrl: './ngx-intl-tel-input.component.html',\r\n\tstyleUrls: ['./ngx-intl-tel-input.component.css'],\r\n\tproviders: [\r\n\t\tCountryCode,\r\n\t\t{\r\n\t\t\tprovide: NG_VALUE_ACCESSOR,\r\n\t\t\t// tslint:disable-next-line:no-forward-ref\r\n\t\t\tuseExisting: forwardRef(() => NgxIntlTelInputComponent),\r\n\t\t\tmulti: true\r\n\t\t},\r\n\t\t{\r\n\t\t\tprovide: NG_VALIDATORS,\r\n\t\t\tuseValue: phoneNumberValidator,\r\n\t\t\tmulti: true,\r\n\t\t}\r\n\t]\r\n})\r\nexport class NgxIntlTelInputComponent implements OnInit {\r\n\r\n\t@Input() value = '';\r\n\t@Input() preferredCountries: Array<string> = [];\r\n\t@Input() enablePlaceholder = true;\r\n\t@Input() cssClass = 'form-control';\r\n\t@Input() onlyCountries: Array<string> = [];\r\n\t@Input() enableAutoCountrySelect = false;\r\n\r\n\tphoneNumber = '';\r\n\tallCountries: Array<Country> = [];\r\n\tpreferredCountriesInDropDown: Array<Country> = [];\r\n\tselectedCountry: Country;\r\n\tphoneUtil = lpn.PhoneNumberUtil.getInstance();\r\n\tdisabled = false;\r\n\terrors: Array<any> = ['Phone number is required.'];\r\n\r\n\r\n\tonTouched = () => { };\r\n\tpropagateChange = (_: any) => { };\r\n\r\n\tconstructor(\r\n\t\tprivate countryCodeData: CountryCode\r\n\t) {}\r\n\r\n\tngOnInit() {\r\n\r\n\t\tthis.fetchCountryData();\r\n\r\n\t\tif (this.preferredCountries.length) {\r\n\t\t\tthis.preferredCountries.forEach(iso2 => {\r\n\t\t\t\tconst preferredCountry = this.allCountries.filter((c) => {\r\n\t\t\t\t\treturn c.iso2 === iso2;\r\n\t\t\t\t});\r\n\r\n\t\t\t\tthis.preferredCountriesInDropDown.push(preferredCountry[0]);\r\n\t\t\t});\r\n\t\t}\r\n\t\tif (this.onlyCountries.length) {\r\n\t\t\tthis.allCountries = this.allCountries.filter(c => this.onlyCountries.includes(c.iso2));\r\n\t\t}\r\n\t\tif (this.preferredCountriesInDropDown.length) {\r\n\t\t\tthis.selectedCountry = this.preferredCountriesInDropDown[0];\r\n\t\t} else {\r\n\t\t\tthis.selectedCountry = this.allCountries[0];\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onPhoneNumberChange(): void {\r\n\t\tthis.value = this.phoneNumber;\r\n\r\n\t\tlet number: lpn.PhoneNumber;\r\n\t\ttry {\r\n\t\t\tnumber = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());\r\n\t\t} catch (e) {\r\n\t\t}\r\n\r\n\t\tlet countryCode = this.selectedCountry.iso2;\r\n\t\t// auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\r\n\t\tif (this.enableAutoCountrySelect) {\r\n\t\t\tcountryCode = number && number.getCountryCode()\r\n\t\t\t\t? this.getCountryIsoCode(number.getCountryCode(), number)\r\n\t\t\t\t: this.selectedCountry.iso2;\r\n\t\t\tif (countryCode !== this.selectedCountry.iso2) {\r\n\t\t\t\tconst newCountry = this.allCountries.find(c => c.iso2 === countryCode);\r\n\t\t\t\tif (newCountry) {\r\n\t\t\t\t\tthis.selectedCountry = newCountry;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCode = countryCode ? countryCode : this.selectedCountry.iso2;\r\n\r\n\t\tif (!this.value) {\r\n\t\t\t// tslint:disable-next-line:no-null-keyword\r\n\t\t\tthis.propagateChange(null);\r\n\t\t} else {\r\n\t\t\tthis.propagateChange({\r\n\t\t\t\tnumber: this.value,\r\n\t\t\t\tinternationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL) : '',\r\n\t\t\t\tnationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL) : '',\r\n\t\t\t\tcountryCode: countryCode.toUpperCase()\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onCountrySelect(country: Country, el): void {\r\n\t\tthis.selectedCountry = country;\r\n\r\n\t\tif (this.phoneNumber.length > 0) {\r\n\t\t\tthis.value = this.phoneNumber;\r\n\r\n\t\t\tlet number: lpn.PhoneNumber;\r\n\t\t\ttry {\r\n\t\t\t\tnumber = this.phoneUtil.parse(this.phoneNumber, this.selectedCountry.iso2.toUpperCase());\r\n\t\t\t} catch (e) {\r\n\t\t\t}\r\n\r\n\t\t\tthis.propagateChange({\r\n\t\t\t\tnumber: this.value,\r\n\t\t\t\tinternationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL) : '' ,\r\n\t\t\t\tnationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL) : '',\r\n\t\t\t\tcountryCode: this.selectedCountry.iso2.toUpperCase()\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tel.focus();\r\n\t}\r\n\r\n\tpublic onInputKeyPress(event): void {\r\n\t\tconst pattern = /[0-9\\+\\-\\ ]/;\r\n\t\tconst inputChar = String.fromCharCode(event.charCode);\r\n\t\tif (!pattern.test(inputChar)) {\r\n\t\t\tevent.preventDefault();\r\n\t\t}\r\n\t}\r\n\r\n\tprotected fetchCountryData(): void {\r\n\t\tthis.countryCodeData.allCountries.forEach(c => {\r\n\t\t\tconst country: Country = {\r\n\t\t\t\tname: c[0].toString(),\r\n\t\t\t\tiso2: c[1].toString(),\r\n\t\t\t\tdialCode: c[2].toString(),\r\n\t\t\t\tpriority: +c[3] || 0,\r\n\t\t\t\tareaCodes: c[4] as string[] || undefined,\r\n\t\t\t\tflagClass: c[1].toString().toLocaleLowerCase(),\r\n\t\t\t\tplaceHolder: ''\r\n\t\t\t};\r\n\r\n\t\t\tif (this.enablePlaceholder) {\r\n\t\t\t\tcountry.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());\r\n\t\t\t}\r\n\r\n\t\t\tthis.allCountries.push(country);\r\n\t\t});\r\n\t}\r\n\r\n\tprotected getPhoneNumberPlaceHolder(countryCode: string): string {\r\n\t\ttry {\r\n\t\t\treturn this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), lpn.PhoneNumberFormat.INTERNATIONAL);\r\n\t\t} catch (e) {\r\n\t\t\treturn e;\r\n\t\t}\r\n\t}\r\n\r\n\tregisterOnChange(fn: any): void {\r\n\t\tthis.propagateChange = fn;\r\n\t}\r\n\r\n\tregisterOnTouched(fn: any) {\r\n\t\tthis.onTouched = fn;\r\n\t}\r\n\r\n\tsetDisabledState(isDisabled: boolean): void {\r\n\t\tthis.disabled = isDisabled;\r\n\t}\r\n\r\n\twriteValue(obj: any): void {\r\n\t\tif (obj) {\r\n\t\t\tthis.phoneNumber = obj;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.onPhoneNumberChange();\r\n\t\t\t}, 1);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getCountryIsoCode(countryCode: number, number: lpn.PhoneNumber): string | undefined {\r\n\t\t// Will use this to match area code from the first numbers\r\n\t\tconst rawNumber = number.values_['2'].toString();\r\n\t\t// List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)\r\n\t\tconst countries = this.allCountries.filter(c => c.dialCode === countryCode.toString());\r\n\t\t// Main country is the country, which has no areaCodes specified in country-code.ts file.\r\n\t\tconst mainCountry = countries.find(c => c.areaCodes === undefined);\r\n\t\t// Secondary countries are all countries, which have areaCodes specified in country-code.ts file.\r\n\t\tconst secondaryCountries = countries.filter(c => c.areaCodes !== undefined);\r\n\t\tlet matchedCountry = mainCountry ? mainCountry.iso2 : undefined;\r\n\r\n\t\t/*\r\n\t\t\tInterate over each secondary country and check if nationalNumber starts with any of areaCodes available.\r\n\t\t\tIf no matches found, fallback to the main country.\r\n\t\t*/\r\n\t\tsecondaryCountries.forEach(country => {\r\n\t\t\tcountry.areaCodes.forEach(areaCode => {\r\n\t\t\t\tif (rawNumber.startsWith(areaCode)) {\r\n\t\t\t\t\tmatchedCountry = country.iso2;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\treturn matchedCountry;\r\n\t}\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { NgxIntlTelInputComponent } from './ngx-intl-tel-input.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BsDropdownModule } from 'ngx-bootstrap';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgxIntlTelInputService } from './ngx-intl-tel-input.service';\r\n\r\n@NgModule({\r\n\tdeclarations: [NgxIntlTelInputComponent],\r\n\timports: [\r\n\t\tCommonModule,\r\n\t\tFormsModule,\r\n\t\tReactiveFormsModule,\r\n\t\tBsDropdownModule.forRoot()\r\n\t],\r\n\texports: [NgxIntlTelInputComponent]\r\n})\r\nexport class NgxIntlTelInputModule {\r\n\tstatic forRoot(): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: NgxIntlTelInputModule,\r\n\t\t\tproviders: [NgxIntlTelInputService]\r\n\t\t};\r\n\t}\r\n}\r\n"]}